#import necessary libraries
library(tidyverse)
library(caret)
install.packages('e1071', dependencies=TRUE)
setwd("E:/CSC2062/Assignmnet2/Section2_features")#set work directory
featuresTable<-read.csv(file='40256761_features.csv')#read features list into r
mat<-as.matrix(featuresTable)#set features Table as a matrix
#fit a multiple regression model for horizontalness
horizontalness.lm<-lm(as.numeric(horizontalness)~as.numeric(nr_pix) + as.numeric(row_with_2) + as.numeric(cols_with_2) + as.numeric(rows_with_3p) + as.numeric(cols_with_3p) + as.numeric(height) + as.numeric(width) + as.numeric(left2tile) + as.numeric(right2tile) + as.numeric(verticalness) + as.numeric(top2tile) + as.numeric(bottom2tile), data=featuresTable)
#create empty vectors
H_predictions<-c()
prediction_label<-c()
prediction_index<-c()
type<-c()
for(i in 1:168){#loop through dataset
#use multiple regression model to predict values of horizontalness
predictions<-predict(horizontalness.lm, data.frame(nr_pix = mat[i,3], row_with_2 = mat[i,4], cols_with_2 =  mat[i,5], rows_with_3p = mat[i,6], cols_with_3p = mat[i,7], height = mat[i,8], width = mat[i,9], left2tile = mat[i,10], right2tile = mat[i,11], verticalness = mat[i,12], top2tile = mat[i,13], bottom2tile = mat[i,14]))
#add relevant data to corresponding vectors
H_predictions<-c(H_predictions, predictions)
prediction_label<-c(prediction_label, mat[i,1])
prediction_index<-c(prediction_index, mat[i,2])
}
#write predictions along with corresponding label and index to matrix
label_index<-rbind(prediction_label,prediction_index)
prediction_label_index<-rbind(label_index,H_predictions)
H_predictions_mat<-matrix(prediction_label_index, nrow=168, ncol=3, byrow = TRUE)
print(H_predictions_mat)
for (i in 1:168){#loop through dataset
if(mat[i,1]=="one"||mat[i,1]=="two"||mat[i,1]=="three"||mat[i,1]=="four"||mat[i,1]=="five"||mat[i,1]=="six"||mat[i,1]=="seven"){
type<-c(type,1)#assign digits a value of 1
}else if(mat[i,1]=="a"||mat[i,1]=="b"||mat[i,1]=="c"||mat[i,1]=="d"||mat[i,1]=="e"||mat[i,1]=="f"||mat[i,1]=="g"){
type<-c(type,0)#assign letters a value of 0
}else{
type<-c(type,2)#assign maths symbols a value of 2
}
}
featuresTable$type <- type#add type column to features table
Digits_Letters<-subset(featuresTable, type==1|type==0)#subset dataset without maths symbols
Digits_Letters$type<-as.factor(Digits_Letters$type)#set type as factor
set.seed(42)#set seed for constant results when rerunning code
train.control<-trainControl(method = "cv", number = 5)#5 fodl cross validation of logistic regression
#fit logistic regression model for type with cols_with_2, rows_with_3p and horizontalness as predictors
model<-train(type~cols_with_2 + rows_with_3p + horizontalness, data=Digits_Letters, method = "glm", family = binomial, trControl = train.control)
print(model)#output logistic regression model
predict(model, Digits_Letters, type="raw")#predict value of type using the logistic regression model
print(Digits_Letters$type)
#creating a vector containing a random assortment of 1s and 0s, representing the digit and letter respectively
random_model_type<-c(sample(0:1,112, replace = TRUE))
dbinom(112,size=112,prob = 0.794)#the probability by binomial distribution of the logistic regression model correctly predicting all 112 types
dbinom(112,size=112,prob = 0.5)#the probability by binomial distribution of the random assignment model correctly predicting all 112 types
1-pbinom(as.integer(112 * 0.794),size=112, prob = 0.5)#the probability the random model gets the same result as the logistic regression model
setwd("E:/CSC2062/Assignment2_40256761/Section4_code")
#import necessary libraries
library(tidyverse)
library(caret)
install.packages('e1071', dependencies=TRUE)
setwd("E:/CSC2062/Assignmnet2/Section2_features")#set work directory
featuresTable<-read.csv(file='40256761_features.csv')#read features list into r
mat<-as.matrix(featuresTable)#set features Table as a matrix
#fit a multiple regression model for horizontalness
horizontalness.lm<-lm(as.numeric(horizontalness)~as.numeric(nr_pix) + as.numeric(row_with_2) + as.numeric(cols_with_2) + as.numeric(rows_with_3p) + as.numeric(cols_with_3p) + as.numeric(height) + as.numeric(width) + as.numeric(left2tile) + as.numeric(right2tile) + as.numeric(verticalness) + as.numeric(top2tile) + as.numeric(bottom2tile), data=featuresTable)
#create empty vectors
H_predictions<-c()
prediction_label<-c()
prediction_index<-c()
type<-c()
for(i in 1:168){#loop through dataset
#use multiple regression model to predict values of horizontalness
predictions<-predict(horizontalness.lm, data.frame(nr_pix = mat[i,3], row_with_2 = mat[i,4], cols_with_2 =  mat[i,5], rows_with_3p = mat[i,6], cols_with_3p = mat[i,7], height = mat[i,8], width = mat[i,9], left2tile = mat[i,10], right2tile = mat[i,11], verticalness = mat[i,12], top2tile = mat[i,13], bottom2tile = mat[i,14]))
#add relevant data to corresponding vectors
H_predictions<-c(H_predictions, predictions)
prediction_label<-c(prediction_label, mat[i,1])
prediction_index<-c(prediction_index, mat[i,2])
}
#write predictions along with corresponding label and index to matrix
label_index<-rbind(prediction_label,prediction_index)
prediction_label_index<-rbind(label_index,H_predictions)
H_predictions_mat<-matrix(prediction_label_index, nrow=168, ncol=3, byrow = TRUE)
print(H_predictions_mat)
for (i in 1:168){#loop through dataset
if(mat[i,1]=="one"||mat[i,1]=="two"||mat[i,1]=="three"||mat[i,1]=="four"||mat[i,1]=="five"||mat[i,1]=="six"||mat[i,1]=="seven"){
type<-c(type,1)#assign digits a value of 1
}else if(mat[i,1]=="a"||mat[i,1]=="b"||mat[i,1]=="c"||mat[i,1]=="d"||mat[i,1]=="e"||mat[i,1]=="f"||mat[i,1]=="g"){
type<-c(type,0)#assign letters a value of 0
}else{
type<-c(type,2)#assign maths symbols a value of 2
}
}
featuresTable$type <- type#add type column to features table
Digits_Letters<-subset(featuresTable, type==1|type==0)#subset dataset without maths symbols
Digits_Letters$type<-as.factor(Digits_Letters$type)#set type as factor
set.seed(42)#set seed for constant results when rerunning code
train.control<-trainControl(method = "cv", number = 5)#5 fodl cross validation of logistic regression
#fit logistic regression model for type with cols_with_2, rows_with_3p and horizontalness as predictors
model<-train(type~cols_with_2 + rows_with_3p + horizontalness, data=Digits_Letters, method = "glm", family = binomial, trControl = train.control)
print(model)#output logistic regression model
predict(model, Digits_Letters, type="raw")#predict value of type using the logistic regression model
print(Digits_Letters$type)
#creating a vector containing a random assortment of 1s and 0s, representing the digit and letter respectively
random_model_type<-c(sample(0:1,112, replace = TRUE))
dbinom(112,size=112,prob = 0.794)#the probability by binomial distribution of the logistic regression model correctly predicting all 112 types
dbinom(112,size=112,prob = 0.5)#the probability by binomial distribution of the random assignment model correctly predicting all 112 types
1-pbinom(as.integer(112 * 0.794),size=112, prob = 0.5)#the probability the random model gets the same result as the logistic regression model
#import necessary libraries
library(tidyverse)
library(caret)
install.packages('e1071', dependencies=TRUE)
setwd("E:/CSC2062/Assignment2/Section2_features")#set work directory
featuresTable<-read.csv(file='40256761_features.csv')#read features list into r
mat<-as.matrix(featuresTable)#set features Table as a matrix
#fit a multiple regression model for horizontalness
horizontalness.lm<-lm(as.numeric(horizontalness)~as.numeric(nr_pix) + as.numeric(row_with_2) + as.numeric(cols_with_2) + as.numeric(rows_with_3p) + as.numeric(cols_with_3p) + as.numeric(height) + as.numeric(width) + as.numeric(left2tile) + as.numeric(right2tile) + as.numeric(verticalness) + as.numeric(top2tile) + as.numeric(bottom2tile), data=featuresTable)
#create empty vectors
H_predictions<-c()
prediction_label<-c()
prediction_index<-c()
type<-c()
for(i in 1:168){#loop through dataset
#use multiple regression model to predict values of horizontalness
predictions<-predict(horizontalness.lm, data.frame(nr_pix = mat[i,3], row_with_2 = mat[i,4], cols_with_2 =  mat[i,5], rows_with_3p = mat[i,6], cols_with_3p = mat[i,7], height = mat[i,8], width = mat[i,9], left2tile = mat[i,10], right2tile = mat[i,11], verticalness = mat[i,12], top2tile = mat[i,13], bottom2tile = mat[i,14]))
#add relevant data to corresponding vectors
H_predictions<-c(H_predictions, predictions)
prediction_label<-c(prediction_label, mat[i,1])
prediction_index<-c(prediction_index, mat[i,2])
}
#write predictions along with corresponding label and index to matrix
label_index<-rbind(prediction_label,prediction_index)
prediction_label_index<-rbind(label_index,H_predictions)
H_predictions_mat<-matrix(prediction_label_index, nrow=168, ncol=3, byrow = TRUE)
print(H_predictions_mat)
for (i in 1:168){#loop through dataset
if(mat[i,1]=="one"||mat[i,1]=="two"||mat[i,1]=="three"||mat[i,1]=="four"||mat[i,1]=="five"||mat[i,1]=="six"||mat[i,1]=="seven"){
type<-c(type,1)#assign digits a value of 1
}else if(mat[i,1]=="a"||mat[i,1]=="b"||mat[i,1]=="c"||mat[i,1]=="d"||mat[i,1]=="e"||mat[i,1]=="f"||mat[i,1]=="g"){
type<-c(type,0)#assign letters a value of 0
}else{
type<-c(type,2)#assign maths symbols a value of 2
}
}
featuresTable$type <- type#add type column to features table
Digits_Letters<-subset(featuresTable, type==1|type==0)#subset dataset without maths symbols
Digits_Letters$type<-as.factor(Digits_Letters$type)#set type as factor
set.seed(42)#set seed for constant results when rerunning code
train.control<-trainControl(method = "cv", number = 5)#5 fodl cross validation of logistic regression
#fit logistic regression model for type with cols_with_2, rows_with_3p and horizontalness as predictors
model<-train(type~cols_with_2 + rows_with_3p + horizontalness, data=Digits_Letters, method = "glm", family = binomial, trControl = train.control)
print(model)#output logistic regression model
predict(model, Digits_Letters, type="raw")#predict value of type using the logistic regression model
print(Digits_Letters$type)
#creating a vector containing a random assortment of 1s and 0s, representing the digit and letter respectively
random_model_type<-c(sample(0:1,112, replace = TRUE))
dbinom(112,size=112,prob = 0.794)#the probability by binomial distribution of the logistic regression model correctly predicting all 112 types
dbinom(112,size=112,prob = 0.5)#the probability by binomial distribution of the random assignment model correctly predicting all 112 types
1-pbinom(as.integer(112 * 0.794),size=112, prob = 0.5)#the probability the random model gets the same result as the logistic regression model
